/**
 * Copyright (C) 2023 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package knowledgeCommon.org.cdsframework.ice

import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Set
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdata.BaseDataEvaluationReason
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

global java.util.Date evalTime


// Duplicate Shot/Same Day Overview Rule #1: 
// If all shots are the same CVX code, then evaluate the 1st CVX processed as Valid and evaluate the others as Invalid with a reason code of DUPLICATE_SAME_DAY. 
// (This scenario shouldn't happen with most registries.)
rule "Duplicate Shots/Same Day Overview Rule #1: If both shots are of the same CVX code, then evaluate the 1st CVX processed as Valid and evaluate the 2nd CVS processed as Invalid/Duplicate"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	when
		// All valid duplicate, valid shots on same day have the same CVX code
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false)
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries == $td.associatedTargetSeries, 
			administeredVaccine.cdsConceptName == $td.administeredVaccine.cdsConceptName, doseNumberInSeries == $td.doseNumberInSeries, administeredShotNumberInSeries > $td.administeredShotNumberInSeries,
			isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


// Duplicate Shot/Same Day Dose Overrude Rule 
// If one of the shots is a dose override marked as Valid and the other shot is not a dose override, evaluate the shot that is _not_ a dose override as Invalid with a reason code of DUPLICATE_SHOT_SAME_DAY
rule "Duplicate Shots/Same Day Overview Rule (Dose Override): If one of the shots is a Dose Override marked as Valid and the other shot is not a Dose Override, evaluate the shot that is _not_ a Dose Override as Invalid with a reason code of DUPLICATE_SHOT_SAME_DAY" 
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotGeneralNOSActivationGroup"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == true) 
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


// Duplicate Shot/Same Day Overview Rule #2: 
// If all but one of those shots is an NOS CVX, then evaluate the NOSs as Invalid with a reason code of DUPLICATE_SAME_DAY and evaluate the other (non-NOS) CVX as Valid.
rule "Duplicate Shots/Same Day Overview Rule #2: If one of those shots is an NOS CVX, then evaluate the NOS as Invalid with a reason code of DUPLICATE_SAME_DAY and evaluate the other (non-NOS) CVX as Valid"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotGeneralNOSActivationGroup"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, vaccineComponent.isUnspecifiedFormulation() == false) 
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, vaccineComponent.isUnspecifiedFormulation() == true, isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


// Duplicate Shots/Same Day Overview Rule #3: If no shot is an NOS CVX, if one is a combination vaccine and the others are not a combination vaccine, then evaluate the combination 
// CVX as Valid and evaluate the non-combination CVXs as Invalid with a reason code of DUPLICATE_SAME_DAY
rule "Duplicate Shots/Same Day Overview Rule #3: If neither shot is an NOS CVX, if one is a combination vaccine and the other is not a combination vaccine, then evaluate the combination CVX as Valid and evaluate the non-combination CVX as Invalid with a reason code of DUPLICATE_SAME_DAY"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotComboAndOrNOSActivationGroup"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, vaccineComponent.isUnspecifiedFormulation() == false, administeredVaccine.isCombinationVaccine() == true)
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, vaccineComponent.isUnspecifiedFormulation() == false, administeredVaccine.isCombinationVaccine() == false, 
			isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


// Evaluation Order for Duplicate Shot/Same Day Overview Rule #3: If no shot is an NOS CVX, if one is a combination vaccine and the other is not a combination vaccine, and the combination vaccine
// targets the same or a superset of the diseases as the non-combination vaccine, then evaluate the combination vaccine first 
rule "Duplicate Shots/Same Day Overview Rule #3 (Evaluation Order): If neither shot is an NOS CVX and is a combination vaccine that targets as many or more diseases than the other, then evaluate the combination CVX as Valid and evaluate the non-combination CVX as Invalid with a reason code of DUPLICATE_SAME_DAY" 
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotEvaluationOrder"	
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == false, status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, vaccineComponent.isUnspecifiedFormulation() == false)
		$tdother : TargetDose(this != $td, hasBeenEvaluated == false, status == DoseStatus.EVALUATION_NOT_STARTED, associatedTargetSeries == $td.associatedTargetSeries, administrationDate == $td.administrationDate, 			
			administeredVaccine.isCombinationVaccine() == true, vaccineComponent.isUnspecifiedFormulation() == false, isDuplicateShotSameDayEvaluationOrderCompleted() == false || $td.isDuplicateShotSameDayEvaluationOrderCompleted() == false,
			vaccineComponent.allDiseasesTargetedForImmunity.containsAll($td.vaccineComponent.allDiseasesTargetedForImmunity), 
			// Don't swap one combination vaccine for another combination vaccine
			$td.administeredVaccine.isCombinationVaccine() == true && vaccineComponent.allDiseasesTargetedForImmunity.size > $td.vaccineComponent.allDiseasesTargetedForImmunity.size ||
			// But do swap combination vaccine for monovalent vaccine
			$td.administeredVaccine.isCombinationVaccine() == false && vaccineComponent.allDiseasesTargetedForImmunity.size >= $td.vaccineComponent.allDiseasesTargetedForImmunity.size)
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_NOT_STARTED),
			setDuplicateShotSameDayEvaluationOrderCompleted(true);
		}
		modify($tdother) {
			setStatus(DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS),
			setDuplicateShotSameDayEvaluationOrderCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + "will be evaluted before " + $td + " in TargetSeries " + $td.associatedTargetSeries);
end



// Duplicate Shots/Same Day Overview Rule #4: If all shots are an NOS CVX, then evaluate the 1st CVX processed as Valid and evaluate the other CVXs processed as Invalid with a 
// reason code of DUPLICATE_SAME_DAY
rule "Duplicate Shots/Same Day Overview Rule #4: If both shots are an NOS CVX, then evaluate the 1st CVX processed as Valid and evaluate the 2nd CVX processed as Invalid with a reason code of DUPLICATE_SAME_DAY"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotComboAndOrNOSActivationGroup"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, vaccineComponent.isUnspecifiedFormulation() == true)
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, vaccineComponent.isUnspecifiedFormulation() == true, administeredShotNumberInSeries > $td.administeredShotNumberInSeries,
			isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


//  If neither shot is an NOS CVX, neither shot is a combination, or both shots are a combination then:
rule "Duplicate Shot/Same Day Overview Abstract Rule #5: Make note if vaccines different, neither shot is an NOS CVX, neither shot is a combination, or both shots are a combination"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, vaccineComponent.isUnspecifiedFormulation() == false, $tdIsCombination: administeredVaccine.isCombinationVaccine())
		$tdother : TargetDose(this != $td, associatedTargetSeries == $td.associatedTargetSeries, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false,
			vaccineComponent.isUnspecifiedFormulation() == false, administeredVaccine.cdsConceptName != $td.administeredVaccine.cdsConceptName, doseNumberInSeries == $td.doseNumberInSeries, $tdOtherIsCombination : administeredVaccine.isCombinationVaccine(),
			isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
		eval($tdIsCombination == true && $tdOtherIsCombination == true || $tdIsCombination == false && $tdOtherIsCombination == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td + " in TargetSeries " + $td.associatedTargetSeries);
end


rule "Duplicate Shots/Same Day non-DTP Rule 5a: non-DTP shots; set the 2nd shot as Invalid w/ DUPLICATE_SHOT_SAME_DAY"
		extends "Duplicate Shot/Same Day Overview Abstract Rule #5: Make note if vaccines different, neither shot is an NOS CVX, neither shot is a combination, or both shots are a combination"
	dialect "java"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotAbstractRule5"
	auto-focus true
	when	
		eval($td.getAssociatedTargetSeries().getSeriesRules().isDoseNumberCalculationBasedOnDiseasesTargetedByVaccinesAdministered() == true && 
			$tdother.getVaccineComponent().getAllDiseasesTargetedForImmunity().size() == $td.getVaccineComponent().getAllDiseasesTargetedForImmunity().size() &&
			$tdother.getVaccineComponent().getAllDiseasesTargetedForImmunity().containsAll($td.getVaccineComponent().getAllDiseasesTargetedForImmunity()))
	then
		String _RULENAME = drools.getRule().getName();
		TargetDose tdToModifyInvalid = null;
		TargetDose tdToModifyValid = null;
		if ($td.getAdministeredShotNumberInSeries() > $tdother.getAdministeredShotNumberInSeries()) {
			tdToModifyInvalid = $td;
			tdToModifyValid = $tdother;
		}
		else {
			tdToModifyInvalid = $tdother;
			tdToModifyValid = $td;
		}
		modify(tdToModifyInvalid) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify(tdToModifyValid) {
			setStatus(DoseStatus.VALID),
			setDuplicateShotSameDayCheckCompleted(true),
			removeAllEvaluationReasonsFromAllReasonSets();
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, tdToModifyInvalid + " in TargetSeries DTP vaccine group");
end


// If a shot is ACCEPTED/EXTRA_DOSE and has the same dose number as a valid shot, then evaluate ACCEPTED/EXTRA_DOSE as Invalid with a reason code of DUPLICATE_SAME_DAY. 
rule "Duplicate Shots/Same Day: If a shot is ACCEPTED/EXTRA_DOSE and has the same dose number as a valid shot, then evaluate ACCEPTED/EXTRA_DOSE as Invalid with a reason code of DUPLICATE_SAME_DAY"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	when
		// All valid duplicate, valid shots on same day have the same CVX code
		$td : TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID)
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.ACCEPTED, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, containsAcceptedReason(BaseDataEvaluationReason._EXTRA_DOSE_EVALUATION_REASON.cdsListItemName),
			isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


// If a shot is INVALID and has no other reason code, but there is another shot administered on the same day that is VALID, add the reason DUPLICATE_SHOT_SAME_DAY to the invalid shot
rule "Duplicate Shots/Same Day: If a shot is INVALID with no reason code and there is a VALID dose on the same day, add the reason DUPLICATE_SHOT_SAME_DAY to the Invalid shot"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID)
		$tdother : TargetDose(this != $td, associatedTargetSeries == $td.associatedTargetSeries, hasBeenEvaluated == true, doseNumberInSeries == $td.doseNumberInSeries, status == DoseStatus.INVALID, administrationDate == $td.administrationDate,
			 allEvaluationReasonsFromAllReasonSets.empty == true || allEvaluationReasonsFromAllReasonSets.size == 1 && allEvaluationReasonsFromAllReasonSets.contains(BaseDataEvaluationReason._UNSPECIFIED_REASON.getCdsListItemName)) 
	then
		String _RULENAME = drools.getRule().getName();
		$tdother.addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end
