/**
 * Copyright (C) 2024 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package knowledgeCommon.org.cdsframework.ice

import java.util.List
import java.util.Set
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.supportingdata.BaseDataEvaluationReason
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

expander org.cdsframework^ICE^1.0.0.dsl

global java.util.Date evalTime
global org.cdsframework.ice.service.Schedule schedule


// If for some reason an administered shot is removed from working memory (should not happen) and there is an associated IceFact with that shot, then remove the IceFact
// from working memory 
rule "Evaluation(Any): Remove IceFact if corresponding shot is no longer in the Fact List"
	dialect "mvel"
	agenda-group "CustomAnyRuleflowGroupRule"
	auto-focus true
	when
		There is an IceFact $oIceFact
			- make note of the associated Administered Shot as $currentShot
		There does not exist an Administered Shot
			- that is the Same Shot as $currentShot
	then
		Log that this dose rule fired for the dose $currentShot
		Retract IceFact $oIceFact from working memory
end


// If for some reason an administered shot is removed from a TargetSeries (should not happen) and there is an associated IceFact with that shot, then remove the IceFact
// from working memory 
rule "Evaluation(Any): Remove IceFact if corresponding shot is no longer in the TargetSeries"
	dialect "mvel"
	agenda-group "CustomAnyRuleflowGroupRule"
	auto-focus true
	when
		There is an IceFact $oIceFact
			- make note of the associated Administered Shot as $currentShot
			- make note of the associated Series as $targetSeries
		There exists a Series
			- that is the same Series as $targetSeries
			- the series does not contain the Shot $currentShot
	then
		Log that this dose rule fired for the dose $currentShot
		Retract IceFact $oIceFact from working memory
end


// If for some reason a TargetSeries is removed from working memory (should not happen) and there is an associated IceFact with that TargerSeries, then remove the IceFact
// from working memory 
rule "Evaluation(Any): Remove IceFact if corresponding TargetSeries is no longer in the Fact List"
	dialect "mvel"
	agenda-group "CustomAnyRuleflowGroupRule"
	auto-focus true
	when
		There is an IceFact $oIceFact
			- make note of the associated Series as $targetSeries
		There does not exist a Series
			- that is the same Series as $targetSeries
	then
		Retract IceFact $oIceFact from working memory
		Log that this Series Rule fired for the Series $targetSeries
end


rule "Evaluate the Age when the Shot Administered is Before the Birthdate"
	dialect "mvel"
	agenda-group "HistoryEvaluation^customEvaluationRule"
	activation-group "doseAgeCheck"
	when
		The patient information $oEvaluatedPerson must be known to complete writing this rule
			- make note of the patient's birthdate as $dtBirthDate
		There is an Administered Shot $currentDose that needs to be evaluated
			- the Administration Date of the shot is < $dtBirthDate
			- make note of the target dose number for this shot as $nDoseNumber
			- make note of the Associated Series as $associatedTargetSeries
		There is a Series $targetSeries identified by $associatedTargetSeries
			- the Number of Doses Required to Complete this Series is >= $nDoseNumber
	then
		Include the reason for shot $currentDose Invalid due to "Prior to DOB"
		Record that this dose rule was processed for the TargetDose $currentDose
		Log that this dose rule fired for the dose $currentDose in the Series $targetSeries 
end


rule "Evaluate the Interval when the Shot Administered is Before the Birth Date"
	dialect "mvel"
	agenda-group "HistoryEvaluation^customEvaluationRule"
	activation-group "doseIntervalCheck"
	when
		There is an Administered Shot $currentDose that needs to be evaluated
			- the administered shot number is >= 2
			- make note of the administered shot number as $nAdministeredShotNumber
			- make note of the target dose number for this shot as $nDoseNumber
			- make note of the Associated Series as $associatedTargetSeries
		The patient information $oEvaluatedPerson must be known to complete writing this rule
			- make note of the patient's birthdate as $dtBirthDate
		There is an Administered Shot $previousDose
			- the shot belongs to the Series $associatedTargetSeries
			- the administered shot number is == ($nAdministeredShotNumber-1)
			- the administration date of the shot is < $dtBirthDate
		There is a Series $targetSeries identified by $associatedTargetSeries
			- the Number of Doses Required to Complete this Series is >= $nDoseNumber
	then
		// There is no minimum interval according, so don't do an interval check and thereby override the standard interval check
		Record that this dose rule was processed for the TargetDose $currentDose
		Log that this dose rule fired for the dose $currentDose in the Series $targetSeries 
end


// A live virus vaccine must be administered on the same day or with a minimum interval of 24 days if in the same vaccine group; 
// otherwise the vaccine that does not meet the minimum interval will be considered invalid with a reason of Too Early Live Virus. 
rule "Check if the Shot is Too Early Due to Live Virus Conflict with live virus shot < 24 days in the same vaccine group"
	dialect "mvel"
	agenda-group "HistoryEvaluation^customEvaluationRule"
	when
		There is an Administered Shot $targetDose that needs to be evaluated
			- the Vaccine Administered is a Live Virus Vaccine
			- the Shot has not already been marked as a Live Virus Conflict (as we do not want this rule executing more than necessary)
			- make note of the Date this Shot was Administered as $administrationDate
			- make note of the Associated Vaccine Group as $associatedVaccineGroup
			- make note of the Associated Series as $associatedTargetSeries			
		There is an Administered Shot $otherShot
			- the Vaccine Administered is a Live Virus Vaccine
			- the shot belongs to the Vaccine Group $associatedVaccineGroup
			- the Administration Date of the shot is < $administrationDate
			- make note of the Date this Shot was Administered as $previousShotDate
		Confirm elapsed time between $previousShotDate and $administrationDate < "24d"
	then
		Include the reason for shot $targetDose Invalid due to "Too Early Live Virus"
		Log that this dose rule fired for the dose $targetDose in the Series $associatedTargetSeries
end


// A live virus vaccine must be administered on the same day or with a minimum interval of 28 days if in difference vaccine groups; 
// otherwise the vaccine that does not meet the minimum interval will be considered invalid with a reason of Too Early Live Virus. 
// This spans across all series and vaccine groups. We'll have this rule override the generic interval check since there's no point
// in checking that interval if this one does not pass
rule "Check if the Shot is Too Early Due to Live Virus Conflict with live virus shot < 28 days in a different vaccine group"
	dialect "mvel"
	agenda-group "HistoryEvaluation^customEvaluationRule"
	when
		There is an Administered Shot $targetDose that needs to be evaluated
			- the Vaccine Administered is a Live Virus Vaccine
			- the Shot has not already been marked as a Live Virus Conflict (as we do not want this rule executing more than necessary)
			- make note of the Date this Shot was Administered as $administrationDate
			- make note of the Associated Vaccine Group as $associatedVaccineGroup
			- make note of the Associated Series as $associatedTargetSeries			
		There is an Administered Shot $otherShot
			- the Vaccine Administered is a Live Virus Vaccine
			- the shot does not belong to the Vaccine Group $associatedVaccineGroup
			- the Administration Date of the shot is < $administrationDate
			- make note of the Date this Shot was Administered as $previousShotDate
		Confirm elapsed time between $previousShotDate and $administrationDate < "28d"
	then
		Include the reason for shot $targetDose Invalid due to "Too Early Live Virus"
		Log that this dose rule fired for the dose $targetDose in the Series $associatedTargetSeries
end


rule "Check if the Shot is Too Early Due to Live Virus Conflict with live virus shot < 28 days between two combination vaccines"
	dialect "mvel"
	agenda-group "HistoryEvaluation^customEvaluationRule"
	when
		There is an Administered Shot $targetDose that needs to be evaluated
			- the Vaccine Administered is a Live Virus Vaccine
			- the Vaccine Administered is a Combination Vaccine
			- the Shot has not already been marked as a Live Virus Conflict (as we do not want this rule executing more than necessary)
			- make note of the Date this Shot was Administered as $administrationDate
			- make note of the Associated Vaccine Group as $associatedVaccineGroup
			- make note of the Associated Series as $associatedTargetSeries			
		There is an Administered Shot $otherShot
			- the Vaccine Administered is a Live Virus Vaccine
			- the Vaccine Administered is a Combination Vaccine
			- the shot does not belong to the Vaccine Group $associatedVaccineGroup
			- the Administration Date of the shot is < $administrationDate
			- make note of the Date this Shot was Administered as $previousShotDate
		Confirm elapsed time between $previousShotDate and $administrationDate < "28d"
	then
		Include the reason for shot $targetDose Invalid due to "Too Early Live Virus"
		Log that this dose rule fired for the dose $targetDose in the Series $associatedTargetSeries
end
