/**
 * Copyright (C) 2023 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package knowledgeModule.gov.nyc.cir.ice

import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Set
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.opencds.vmr.v1_0.internal.SubstanceAdministrationEvent
import org.opencds.vmr.v1_0.internal.concepts.ImmunizationConcept
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.Schedule
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetDoseInitializationTracker
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

global java.util.Date evalTime
global org.cdsframework.ice.service.Schedule schedule



///////////////////////////////////////////////////////////// Meningococcal ACWY and Meningococcal B TargetDose Initialization Rules ////////////////////////////////////////////////////////////

// Specialized initialization rule for Meningococcal and Meningococcal B vaccine group
// This catchall rule should not fire, because all vaccines should either be explicitly placed into the Meningococcal ACWY or Meningococcal B vaccine group per other rules (below). 
// But if it does fire, it will be placed into the vaccine group if it has at least one series that accepts that vaccine. This is actually more restrictive than the default cdsframework rule,
// which will initialize a TargetDose into a TargetSeries is both target the same disease (as specified by the disease code)
rule "CandidateDosesIdentification: Initialize TargetDose in Meningococcal or Meningococcal B Vaccine Group Series"
	dialect "java"
	agenda-group "CandidateDosesIdentification^customCandidateDosesIdentificationRule"
	salience 55
	no-loop true
	when
		$i : ImmunizationConcept($ctid : getConceptTargetId(), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid)
		// SeriesRules fact check: Because according to NYC rules, the Meningococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// Thius, for Meningococcal ACWY and Meningococcal B vaccine groups, we instead check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other meningococcal initialization rules -- allow initialization of the proper series with the shot). This 
		// is actually more restrictive in terms of letting a TargetDose be initialized within a TargetSeries		
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == "VACCINE_GROUP_CONCEPT.830" || getVaccineGroup() == "VACCINE_GROUP_CONCEPT.835", 
			vaccineIsAllowableInOneOrMoreDoseRules(schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, schedule.getVaccineByCdsConceptValue($occ)) == true)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "completed");
end


// Meningococcal B vaccines (CVX 162, 163) always initializes the Meningococcal B vaccine group
rule "CandidateDosesIdentification: Initialize Meningococcal B vaccines (CVX 162, 163) in the Meningococcal B vaccine group"
	dialect "java"
	agenda-group "CandidateDosesIdentification^customCandidateDosesIdentificationRule"
	salience 60
	no-loop true
	when
		// This is a Meningococcal B shot
		$i : ImmunizationConcept($ctid : getConceptTargetId(), getOpenCdsConceptCode() in ("ICE162", "ICE163"), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid, $saeAdminDate : getAdministrationTimeInterval())
		// SeriesRules fact check: Because according to NYC rules, the Meningococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// Thius, for Meningococcal ACWY and Meningococcal B vaccine groups, we instead check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other meningococcal initialization rules -- allow initialization of the proper series with the shot).  
		// Meningococcal B Series
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == "VACCINE_GROUP_CONCEPT.835", 
			vaccineIsAllowableInOneOrMoreDoseRules(schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, schedule.getVaccineByCdsConceptValue($occ)) == true)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetDose initialized in TargetSeries " + $ts.getSeriesName() + " ; vaccine: " + $occ + "; vaccine group " + $vg + "; shotdate " + $saeAdminDate);
end


// Meningococcal ACWY vaccines (CVX 114, 136, 32, 108, 147) always initializes the Meningococcal B vaccine group
rule "CandidateDosesIdentification: Initialize Meningococcal B vaccines (CVX 114, 136, 32, 108, 147) in the Meningococcal B vaccine group"
	dialect "java"
	agenda-group "CandidateDosesIdentification^customCandidateDosesIdentificationRule"
	salience 60
	no-loop true
	when
		// This is a Meningococcal ACWY shot
		$i : ImmunizationConcept($ctid : getConceptTargetId(), getOpenCdsConceptCode() in ("ICE114","ICE136","ICE32","ICE108","ICE147"), $occ : getOpenCdsConceptCode())
		$sae : SubstanceAdministrationEvent(id == $ctid, $saeAdminDate : getAdministrationTimeInterval())
		// SeriesRules fact check: Because according to NYC rules, the Meningococcal disease is associated with two vaccine groups, we can't simply check if the  
		// vaccine targets a disease associated with the vaccine group because that would cotentially initialize this shot with series in both vaccine groups. 
		// Thius, for Meningococcal ACWY and Meningococcal B vaccine groups, we instead check if the series supports one or more doses with the administered 
		// vaccine, and if so -- in conjunction with other meningococcal initialization rules -- allow initialization of the proper series with the shot).  
		// Meningococcal ACWY Series
		$s : SeriesRules($sseriesName : getSeriesName(), $vg : getVaccineGroup(), getVaccineGroup() == "VACCINE_GROUP_CONCEPT.830", 
			vaccineIsAllowableInOneOrMoreDoseRules(schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode())))
		$ts : TargetSeries(seriesName == $sseriesName, $tsid : targetSeriesIdentifier)
		// Condition: the tracking map must either NOT contain a key with this SubstanceAdministrationEvent and this OpenCDS concept, or if it does contain 
		// this SubstanceAdministrationEvent and this OpenCDS concept, that the value of this key is the same as concept code as that of the vaccine group's. 
		// Furthermore, if there exists a vaccine component within this shot administered that has not been initialized in this series for this vaccine group, 
		$tdit : TargetDoseInitializationTracker(shotAdministeredIsEligibleForInclusionInTargetSeries($i, $vg, $sae, $ts, schedule.getVaccineByCdsConceptValue($occ)) == true)
	then
		String _RULENAME = drools.getRule().getName();
		Vaccine administeredVaccine = schedule.getVaccineByCdsConceptValue($i.getOpenCdsConceptCode());
		List<TargetDose> initializedTargetDoses = $tdit.addTargetDoseInitialization(administeredVaccine, $sae, $ts, schedule);
		for (TargetDose initializedTargetDose : initializedTargetDoses) {
			insert(initializedTargetDose);
		}
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "TargetDose initialized in TargetSeries " + $ts.getSeriesName() + " ; vaccine: " + $occ + "; vaccine group " + $vg + "; shotdate " + $saeAdminDate);
end
