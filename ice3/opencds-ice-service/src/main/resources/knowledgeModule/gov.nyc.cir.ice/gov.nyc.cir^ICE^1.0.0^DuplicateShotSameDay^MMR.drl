/**
 * Copyright (C) 2023 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package knowledgeModule.gov.nyc.cir.ice

import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Set
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdata.BaseDataEvaluationReason
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

global java.util.Date evalTime


rule "Duplicate Shots/Same Day(MMR): If any MMR vaccine other than MMRV is administered on the same day as MMRV, evaluate the MMRV shot first"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotEvaluationOrder"
	when
		$td: TargetDose(hasBeenEvaluated == false, status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", administeredVaccine.cdsConceptName != "ICE94")
		$tdother : TargetDose(this != $td, hasBeenEvaluated == false, status == DoseStatus.EVALUATION_NOT_STARTED, associatedTargetSeries == $td.associatedTargetSeries, administrationDate == $td.administrationDate, administeredVaccine.cdsConceptName == "ICE94") 
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_NOT_STARTED),
			setDuplicateShotSameDayEvaluationOrderCompleted(true);
		}
		modify($tdother) {
			setStatus(DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS),
			setDuplicateShotSameDayEvaluationOrderCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + "will be evaluted before " + $td + " in TargetSeries " + $td.associatedTargetSeries);
end

	
rule "Duplicate Shots/Same Day(MMR): If a measles/mumps/rubella vaccine other than an MMR is administered on the same day as an MMR (excluding MMRV), evaluate the MMR shot first"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	activation-group "duplicateShotEvaluationOrder"
	auto-focus true
	when
		$td: TargetDose(hasBeenEvaluated == false, status == DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS, associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", vaccineComponent.cdsConceptName != "ICE03")
		$tdother : TargetDose(this != $td, hasBeenEvaluated == false, status == DoseStatus.EVALUATION_NOT_STARTED, associatedTargetSeries == $td.associatedTargetSeries, administrationDate == $td.administrationDate, administeredVaccine.cdsConceptName == "ICE03") 
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.EVALUATION_NOT_STARTED),
			setDuplicateShotSameDayEvaluationOrderCompleted(true);
		}
		modify($tdother) {
			setStatus(DoseStatus.PRIMARY_SHOT_DETERMINATION_IN_PROCESS),
			setDuplicateShotSameDayEvaluationOrderCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + "will be evaluted before " + $td + " in TargetSeries " + $td.associatedTargetSeries);
end


rule "Duplicate Shots/Same Day(MMR): If one of those shots is an MMR (CVX 03) and the other is not (excluding MMRV), evaluate the MMR as Valid and evaluate the other as Invalid / Duplicate Shot/Same Day"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	salience 10
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", administeredVaccine.cdsConceptName == "ICE03")
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", vaccineComponent.isUnspecifiedFormulation() == false, administeredVaccine.cdsConceptName != "ICE94", 
			administeredVaccine.cdsConceptName != $td.administeredVaccine.cdsConceptName, isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


rule "Duplicate Shots/Same Day(MMR): If one of those shots is an MMRV (CVX 94) and the other is not, evaluate the MMRV as Valid and evaluate the other as Invalid / Duplicate Shot/Same Day"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	salience 10
	when
		$td: TargetDose(hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", administeredVaccine.cdsConceptName == "ICE94")
		$tdother : TargetDose(this != $td, administrationDate == $td.administrationDate, hasBeenEvaluated == true, status == DoseStatus.VALID, isDoseStatusOverridden() == false, associatedTargetSeries == $td.associatedTargetSeries, 
			doseNumberInSeries == $td.doseNumberInSeries, associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", vaccineComponent.isUnspecifiedFormulation() == false, 
			administeredVaccine.cdsConceptName != $td.administeredVaccine.cdsConceptName, isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end


