/**
 * Copyright (C) 2023 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */
 
package knowledgeModule.gov.nyc.cir.ice

import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.Set
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdata.BaseDataEvaluationReason
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

global java.util.Date evalTime


///////////////////////////////////////////////////////////// Hep A Specific Duplicate Shot/Same Day Rules Start Here /////////////////////////////////////////////////////////////

// If the patient is >= 19 years at the time of administration, if one of the shots is CVX 83 or CVX 84 (pediatric formulations), then:
//     + evaluate the CVX 83/CVX 84 as Invalid with a reason code of DUPLICATE_SAME_DAY
//     + evaluate the CVX 52 (Hep A adult) as Valid
// If the patient < 19 at the time of administration, if one of the shots is CVX 52 (Hep A adult), then:
//     + evaluate the CVX 52 as Invalid with a reason code of DUPLICATE_SAME_DAY
//     + evaluate the other Hep A CVX (pediatric formulation) as Valid

rule "Duplicate Shot/Same Day (Abstract Hep A): Make note if the adult vaccine (CVX 52) and pediatric vaccine (CVX  83 or CVX 84) duplicate shots"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	salience 10
	when
		$td: TargetDose(associatedTargetSeries.vaccineGroup == "VACCINE_GROUP_CONCEPT.810", status == DoseStatus.VALID, isDoseStatusOverridden() == false, vaccineComponent.cdsConceptName == "ICE52")
		$tdother : TargetDose(this != $td, associatedTargetSeries == $td.associatedTargetSeries, administrationDate == $td.administrationDate, status == DoseStatus.VALID, isDoseStatusOverridden() == false, 
			vaccineComponent.cdsConceptName in ("ICE83","ICE84"), isDuplicateShotSameDayCheckCompleted() == false || $td.isDuplicateShotSameDayCheckCompleted() == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td + " in TargetSeries VACCINE_GROUP_CONCEPT.810 (Hep A)");	
end


rule "Duplicate Shot/Same Day (Hep A): If shot administered at >= 19 years, evalute the adult vaccine (CVX 52) Valid and pediatric vaccine (CVX 83 and/or CVX 84) Invalid / DUPLICATE_SAME_DAY" 
		extends "Duplicate Shot/Same Day (Abstract Hep A): Make note if the adult vaccine (CVX 52) and pediatric vaccine (CVX  83 or CVX 84) duplicate shots"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	salience 10
	when
		$oEvaluatedPerson : EvaluatedPerson($dtBirthDate : demographics.birthTime)
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($dtBirthDate, $td.administrationDate, "19y") >= 0)
	then
		String _RULENAME = kcontext.rule.name;
		modify($tdother) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($td) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $td + " in TargetSeries " + $td.associatedTargetSeries);
end


rule "Duplicate Shot/Same Day (Hep A): If shot administered at < 19 years, evalute the pediatric vaccine (CVX 83 or CVX 84) Valid and the adult vaccine (CVX 52) as Invalid / DUPLICATE_SAME_DAY"
		extends "Duplicate Shot/Same Day (Abstract Hep A): Make note if the adult vaccine (CVX 52) and pediatric vaccine (CVX  83 or CVX 84) duplicate shots"
	dialect "mvel"
	agenda-group "HistoryEvaluation^duplicateShotSameDay"
	auto-focus true
	salience 10
	when
		$oEvaluatedPerson : EvaluatedPerson($dtBirthDate : demographics.birthTime)
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($dtBirthDate, $td.administrationDate, "19y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		modify($td) {
			setStatus(DoseStatus.INVALID),
			setDuplicateShotSameDayCheckCompleted(true),
			addInvalidReason(BaseDataEvaluationReason._DUPLICATE_SAME_DAY_REASON.getCdsListItemName());
		}
		modify($tdother) {
			setDuplicateShotSameDayCheckCompleted(true);
		}
		ICELogicHelper.logDRLDebugMessage(_RULENAME, $tdother + " in TargetSeries " + $td.associatedTargetSeries);
end

